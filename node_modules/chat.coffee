# :mode=coffeescript:indentSize=2:noTabs=true:tabSize=2:
# server-side chat

socket_io=require 'socket.io'

rooms={}
clients={}

exports.create_room=(name) ->
  rooms[name]=
    allowed:{}
    current:{}

exports.remove_room=(name) ->
  rooms[name]=null

exports.authorize=(name,password,admin) ->
  clients[name]=
    password:password
    admin:admin

exports.kick=(name) ->
  if clients[name].socket?
    clients[name].socket.close()
  clients[name]=null

exports.allow_in_room=(name,room,allow) ->
  throw new Error('No room '+room) unless rooms[room]?
  rooms[room][name]=allow
  if not allow and clients[name].socket?
    clients[name].socket.leave room

exports.join=(name,room) ->
  if rooms[room]?
    if client[name].socket?
      if rooms[room].allowed[name]?
        clients[name].socket.join room
        rooms[room].current[name]=true

exports.leave=(name,room) ->
  if rooms[room]?
    if client[name].socket?
      if rooms[room].current[name]?
        clients[name].socket.leave room
        rooms[room].current[name]=null

exports.broadcast=(msg) ->
  io.sockets.broadcast.emit msg

exports.start=(server,msg_callback) ->
  io=socket_io.listen server
  io.configure () ->
    io.set 'authorization',(auth,callback) ->
      if not auth.query.name?
        callback 'Missing user in query'
        return
      if not auth.query.passwd?
        callback 'Missing password in query'
        return
      if not clients[auth.query.name]?
        callback 'Unknown user '+auth.query.name
        return
      if clients[auth.query.name].password!=auth.query.passwd
        callback 'Bad password'
        return

      callback null,true

  io.sockets.on 'connection',(socket) ->
    clients[socket.handshake.name].socket=socket

    socket.on 'message' (text) ->
      msg_callback text,socket

    socket.on 'disconnect' () ->
      clients[socket.handshake.name].socket=null

