# logging

conf=require('module_conf').conf
fs=require 'fs'
path=require 'path'

make_timestamp= ->
  d=new Date()
  return d.getFullYear()+'-'+d.getMonth()+'-'+d.getDate()+' '+d.getHours()+':'+d.getMinutes()+':'+d.getSeconds()+'.'+d.getMilliseconds()

make_file_name= ->
  d=new Date()
  return d.getFullYear()+'-'+d.getMonth()+'-'+d.getDate()+'.log'

if conf.log_path?
  p=path.join process.cwd(),conf.log_path,make_file_name()
  log_stream=fs.createWriteStream p,{flags:'a'}
  if not log_stream
    console.log "Can't create log file "+p
    process.exit 1

  # for some reason, writing to the log file on a process.exit() event allows
  # only one write before it just... closes the stream on its own i guess??
  # this was causing the output to look funny because the Stopped line would
  # never have a newline after it
  # hence we write a newline as the first character
  log_stream.write '\n'

  exports.write=(msg) ->
    log_stream.write '['+make_timestamp()+'] '+msg.trim().replace '\n','\n\t'
    log_stream.write '\n'

  exports.close= ->
    log_stream.destroy()

else
  exports.write=(msg) ->
    console.log msg.trim().replace '\n','\n\t'

  exports.close= ->

exports.error=(msg) ->
  exports.write '*** '+msg+'\n'+new Error().stack
exports.warn=(msg) ->
  exports.write '!!! '+msg
exports.log=(msg) ->
  exports.write '--- '+msg

